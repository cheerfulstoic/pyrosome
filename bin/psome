#!/usr/bin/env ruby

require 'optparse'
require 'json'
require 'csv'

VALID_FORMATS = %w(json csv)

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: psome [options...] [script_name]"

  opts.on("-i", "--input [FORMAT]", "Format of input (#{VALID_FORMATS.inspect})") do |i|
    fail ArgumentError, "Invalid input format: #{i}" unless VALID_FORMATS.include?(i.to_s)

    options[:input] = i
  end

  opts.on("-e", "--exec [CODE]", "Ruby code to execute.  `datum` variable will be in scope") do |code|
    fail ArgumentError, "No code specified" if code.nil? || code.empty?

    options[:code] = code
  end

  opts.on('-h', "--headers", "Does the file have headers (if it is a tablular format)") do |headers|
    options[:headers] = headers
  end

  opts.on('-p', '--print', "Prints the result of the evaluated code") do |print|
    options[:print] = print
  end

  opts.on('-f', '--forks [FORK_COUNT]', "Number of forks to use (parallel mode)") do |forks|
    fail ArgumentError, "Invalid argument for fork count: #{forks.inspect}" if !forks.match(/^\d+$/)

    fail ArgumentError, 'Cannot specify both fork and thread counts at the same time' if options[:threads]

    options[:forks] = forks.to_i
  end

  opts.on('-t', '--threads [THREAD_COUNT]', "Number of threads to use (parallel mode)") do |threads|
    fail ArgumentError, "Invalid argument for thread count: #{threads.inspect}" if !threads.match(/^\d+$/)

    fail ArgumentError, 'Cannot specify both fork and thread counts at the same time' if options[:forks]

    options[:threads] = threads.to_i
  end
end.parse!

def process_datum(_, options)
  code = if options[:code]
           options[:code]
         elsif ARGV[0]
           "_ = #{_.inspect}; " + File.read(ARGV[0])
         else
           fail ArgumentError, 'Either the `-e`/`--exec` flag or a script should be specified'
         end

  result = eval(code)

  puts result if options[:print]
end

PARALLEL_MODE = options[:forks] || options[:threads]

if PARALLEL_MODE
  if options[:forks]
    require 'tempfile'
    LOCK_FILE_PATH = Tempfile.new('pyrosome_mutex_lockfile').path
  else
    MUTEX = Mutex.new
  end

  # Forks can't use Mutex
  def sync_with_flock(&block)
    fail ArgumentError, "No block specified" if block.nil?

    file = File.open(LOCK_FILE_PATH)
    file.flock(File::LOCK_EX)
    block.call
  ensure
    file.flock(File::LOCK_UN)
    file.close
  end

  def sync_with_mutex(&block)
    fail ArgumentError, "No block specified" if block.nil?

    MUTEX.synchronize { block.call }
  end

  sync_method_name = options[:forks] ? :sync_with_flock : :sync_with_mutex
  define_method(:sync, method(sync_method_name))
end

def iterate(stream, options)
  iterator = case options[:input]
             when 'json'
               require 'yajl'
               Yajl::Parser.new.parse(STDIN)
             when 'csv'
               CSV.new(STDIN, headers: options[:headers])
             else
               STDIN.each_line
             end

  if PARALLEL_MODE
    require 'parallel'
    parallel_key = options[:forks] ? :in_processes : :in_threads

    Parallel.each(lambda { iterator.shift || Parallel::Stop }, parallel_key => options[:forks]) do |datum|
      process_datum datum, options
    end
  else
    iterator.each do |datum|
      process_datum datum, options
    end
  end
end

iterate(STDIN, options)

