#!/usr/bin/env ruby

require 'optparse'

VALID_FORMATS = %w(json csv)

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: example.rb [options]"

  opts.on("-i", "--input [FORMAT]", "Format of input (#{VALID_FORMATS.inspect})") do |i|
    fail ArgumentError, "Invalid input format: #{i}" unless VALID_FORMATS.include?(i.to_s)

    options[:input] = i
  end

  opts.on("-e", "--exec [CODE]", "Ruby code to execute.  `datum` variable will be in scope") do |code|
    fail ArgumentError, "No code specified" if code.nil? || code.empty?

    options[:code] = code
  end

  opts.on('-h', "--headers", "Does the file have headers (if it is a tablular format)") do |headers|
    options[:headers] = headers
  end

  opts.on('-p', '--print', "Prints the result of the evaluated code") do |print|
    options[:print] = print
  end

  opts.on('-f', '--forks [FORK_COUNT]', "Number of forks to use (parallel mode)") do |forks|
    fail ArgumentError, "Invalid argument for fork count: #{forks.inspect}" if !forks.match(/^\d+$/)

    options[:forks] = forks.to_i
  end
end.parse!

def process_datum(_, options)
  datum = _

  eval(options[:code]).tap do |result|
    if options[:print]
      puts result
    end
  end
end

def iterate(stream, options)
  iterator = case options[:input]
             when 'json'
               require 'yajl'
               Yajl::Parser.new.parse(STDIN)
             when 'csv'
               require 'csv'
               CSV.new(STDIN, headers: options[:headers])
             end

  if options[:forks]
    puts 'parallel!'
    require 'parallel'
    puts 'parallel?'
    puts 'iterator.shift', iterator.shift.inspect
    Parallel.each(lambda { iterator.shift || Parallel::Stop }, in_processes: options[:forks]) do |datum|
      process_datum datum, options
    end
  else
    iterator.each do |datum|
      process_datum datum, options
    end
  end
end

iterate(STDIN, options)

